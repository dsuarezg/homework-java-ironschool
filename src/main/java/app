import java.util.*;

public class AppHandler {
    private static String schoolName;
    private static Scanner scanner = new Scanner(System.in);
    public static Map<String, Teacher> teachers;
    public static Map<String, Course> courses;
    public static Map<String, Student> students;

    public static void testData() {

        // Datos de prueba para Teachers
        teachers = new HashMap<>();
        Teacher teacher1 = new Teacher("John Doe", 50000.0);
        Teacher teacher2 = new Teacher("Jane Smith", 55000.0);
        teachers.put(teacher1.getTeacherId(), teacher1);
        teachers.put(teacher2.getTeacherId(), teacher2);

        // Datos de prueba para Courses
        courses = new HashMap<>();
        Course course1 = new Course("Mathematics", 200.0);
        Course course2 = new Course("Physics", 250.0);
        courses.put(course1.getCourseId(), course1);
        courses.put(course2.getCourseId(), course2);

        // Datos de prueba para Students
        students = new HashMap<>();
        Student student1 = new Student("Alice Johnson", "123 Main St", "alice@example.com");
        Student student2 = new Student("Bob Brown", "456 Elm St", "bob@example.com");
        students.put(student1.getStudentId(), student1);
        students.put(student2.getStudentId(), student2);

        System.out.println("Test data created successfully!");
    }

    // CREATE METHODS
    private static Teacher createTeacher() {
        System.out.println("Enter the name of the teacher: ");
        String name = scanner.nextLine();
        System.out.println("Enter the salary of the teacher: ");
        Double salary = Double.parseDouble(scanner.nextLine());
        return new Teacher(name, salary);
    }

    private static Course createCourse() {
        System.out.println("Enter the name of the course: ");
        String name = scanner.nextLine();
        System.out.println("Enter the price of the course: ");
        Double price = Double.parseDouble(scanner.nextLine());
        return new Course(name, price);
    }

    private static Student createStudent() {
        System.out.println("Enter the name of the student: ");
        String name = scanner.nextLine();
        System.out.println("Enter the address of the student: ");
        String address = scanner.nextLine();
        System.out.println("Enter the email of the student: ");
        String email = scanner.nextLine();
        return new Student(name, address, email);
    }

    // SHOW METHODS
    private static void showAllStudents() {
        for (Student student : students.values()) {
            System.out.println("Student ID: " + student.getStudentId());
            System.out.println("Name: " + student.getName());
            System.out.println("Address: " + student.getAddress());
            System.out.println("Email: " + student.getEmail());
            System.out.println("-----------------------------");
        }
    }

    private static void showAllTeachers() {
        for (Teacher teacher : teachers.values()) {
            System.out.println("Teacher ID: " + teacher.getTeacherId());
            System.out.println("Name: " + teacher.getName());
            System.out.println("Salary: " + teacher.getSalary());
            System.out.println("-----------------------------");
        }
    }

    private static void showAllCourses() {
        for (Course course : courses.values()) {
            System.out.println("Course ID: " + course.getCourseId());
            System.out.println("Name: " + course.getName());
            System.out.println("Price: " + course.getPrice());
            System.out.println("Teacher: " + (course.getTeacher() != null ? course.getTeacher().getName() : "No teacher assigned"));
            System.out.println("Students enrolled: " + (course.getStudents() != null ? course.getStudents().size() : 0));
            System.out.println("-----------------------------");
        }
    }

    private static void showProfit() {
        double totalEarnings = courses.values().stream().mapToDouble(Course::getMoneyEarned).sum();
        double totalSalaries = teachers.values().stream().mapToDouble(Teacher::getSalary).sum();
        System.out.println("Profit: " + (totalEarnings - totalSalaries));
    }

    // COMMANDS METHODS
    private static void showAcceptedCommands() {
        List<String> validCommands = Arrays.asList(
                "ENROLL [STUDENT_ID] [COURSE_ID]",
                "ASSIGN [TEACHER_ID] [COURSE_ID]",
                "SHOW COURSES",
                "LOOKUP COURSE [COURSE_ID]",
                "SHOW STUDENTS",
                "LOOKUP STUDENT [STUDENT_ID]",
                "SHOW TEACHERS",
                "LOOKUP TEACHER [TEACHER_ID]",
                "SHOW PROFIT"
        );

        System.out.println("Accepted commands:");
        for (String command : validCommands) {
            System.out.println("- " + command);
        }
    }

    public static void commandHandler() {
        showAcceptedCommands();

        System.out.println("Enter a command: ");
        String option = scanner.nextLine().trim();

        String[] parts = option.split(" ");
        if (parts.length == 0) {
            System.out.println("Invalid command. Please try again.");
            return;
        }

        CommandActions actionType = CommandActions.valueOf(parts[0]);
        switch (actionType) {
            case ENROLL:
                if (parts.length == 3) {
                    String studentId = parts[1];
                    String courseId = parts[2];
                    if (students.containsKey(studentId) && courses.containsKey(courseId)) {
                        courses.get(courseId).enrollStudent(students.get(studentId));
                        System.out.println("Student enrolled successfully.");
                    } else {
                        System.out.println("Invalid STUDENT_ID or COURSE_ID.");
                    }
                } else {
                    System.out.println("Invalid command format. Usage: ENROLL [STUDENT_ID] [COURSE_ID]");
                }
                break;

            case ASSIGN:
                if (parts.length == 3) {
                    String teacherId = parts[1];
                    String courseId = parts[2];
                    if (teachers.containsKey(teacherId) && courses.containsKey(courseId)) {
                        courses.get(courseId).assignTeacher(teachers.get(teacherId));
                        System.out.println("Teacher assigned successfully.");
                    } else {
                        System.out.println("Invalid TEACHER_ID or COURSE_ID.");
                    }
                } else {
                    System.out.println("Invalid command format. Usage: ASSIGN [TEACHER_ID] [COURSE_ID]");
                }
                break;

            case SHOW:
                if (parts.length == 2) {
                    CommandOptions classType = CommandOptions.valueOf(parts[1]);
                    switch (classType) {
                        case COURSES:
                            showAllCourses();
                            break;
                        case STUDENTS:
                            showAllStudents();
                            break;
                        case TEACHERS:
                            showAllTeachers();
                            break;
                        case PROFIT:
                            showProfit();
                            break;
                        default:
                            System.out.println("Invalid Command. Options: COURSES, STUDENTS, TEACHERS or PROFIT.");
                    }
                } else {
                    System.out.println("Invalid command format. Usage: SHOW [COURSES|STUDENTS|TEACHERS|PROFIT]");
                }
                break;

            case LOOKUP:
                if (parts.length == 3) {
                    String lookupType = parts[1];
                    String id = parts[2];
                    switch (lookupType) {
                        case "COURSE":
                            if (courses.containsKey(id)) {
                                System.out.println(courses.get(id));
                            } else {
                                System.out.println("Invalid COURSE_ID.");
                            }
                            break;
                        case "STUDENT":
                            if (students.containsKey(id)) {
                                System.out.println(students.get(id));
                            } else {
                                System.out.println("Invalid STUDENT_ID.");
                            }
                            break;
                        case "TEACHER":
                            if (teachers.containsKey(id)) {
                                System.out.println(teachers.get(id));
                            } else {
                                System.out.println("Invalid TEACHER_ID.");
                            }
                            break;
                        default:
                            System.out.println("Invalid LOOKUP command. Options: COURSE, STUDENT, TEACHER.");
                    }
                } else {
                    System.out.println("Invalid command format. Usage: LOOKUP [COURSE|STUDENT|TEACHER] [ID]");
                }
                break;


            default:
                System.out.println("Unknown command. Please try again.");
        }
    }

    // CREATE NEW SCHOOL
    public static void newSchool() {
        System.out.println("Enter the name of the school: ");
        schoolName = scanner.nextLine();

        System.out.println("How many teachers do you want to add to the school?");
        int numberOfTeachers = Integer.parseInt(scanner.nextLine());
        teachers = new HashMap<>(numberOfTeachers);
        for (int i = 0; i < numberOfTeachers; i++) {
            Teacher teacher = createTeacher();
            teachers.put(teacher.getTeacherId(), teacher);
        }

        System.out.println("How many courses do you want to add?");
        int numberOfCourses = Integer.parseInt(scanner.nextLine());
        courses = new HashMap<>(numberOfCourses);
        for (int i = 0; i < numberOfCourses; i++) {
            Course course = createCourse();
            courses.put(course.getCourseId(), course);
        }

        System.out.println("How many students do you want to add?");
        int numberOfStudents = Integer.parseInt(scanner.nextLine());
        students = new HashMap<>(numberOfStudents);
        for (int i = 0; i < numberOfStudents; i++) {
            Student student = createStudent();
            students.put(student.getStudentId(), student);
        }
    }


    // MENU
    public static void menuDisplay() {
        System.out.println("\n======== Iron School ========");
        System.out.println("1. Create new School");
        System.out.println("2. Use accepted commands");
        System.out.println("3. Load data from file");
        System.out.println("4. Save data to file");
        System.out.println("5. Exit");
        System.out.println("=============================");
        System.out.print("Choose an option: ");
    }

    public static void menuHandler() {

        boolean running = true;

        while (running) {
            menuDisplay();
            String option = scanner.nextLine();

            switch (option) {
                case "1":
                    newSchool();
                    break;
                case "2":
                    commandHandler();
                    break;
                case "3":
                    FileHandler.loadData();
                    break;
                case "4":
                    FileHandler.saveData();
                    break;
                case "5", "exit":
                    running = false;
                    break;
                default:
                    System.out.println("Invalid option. Please try again.");
            }
        }
        scanner.close();
    }

}
